<?xml version="1.0" encoding="UTF-8"?>
<api context="/aps" name="APSAPI" xmlns="http://ws.apache.org/ns/synapse">

  <!-- =================== 1) تحضير التوكن =================== -->
  <resource methods="POST OPTIONS" protocol="http" uri-template="/prepare-token">
    <inSequence>
     
      <property name="access_code"          scope="default" type="STRING" value="kJCjkMslRQUSzGDMUb58"/>
      <property name="merchant_identifier"  scope="default" type="STRING" value="HPEpXRQn"/>
      <property name="sha_request_phrase"   scope="default" type="STRING" value="54LdvuI4bpMaq1/3dv8M.x_$"/>
      <property name="return_url"           scope="default" type="STRING" value="http://localhost:8290/aps/token-callback"/>
      <property name="gateway_url"          scope="default" type="STRING" value="https://sbcheckout.payfort.com/FortAPI/paymentPage"/>

      <!-- مدخلات JSON من الفرونت -->
      <property name="merchant_reference" scope="default" type="STRING" expression="json-eval($.merchant_reference)"/>
      <property name="language"           scope="default" type="STRING" expression="json-eval($.language)"/>

      <script language="js"><![CDATA[
        var MessageDigest = Java.type('java.security.MessageDigest');
        var Formatter = Java.type('java.util.Formatter');
        var TreeMap = Java.type('java.util.TreeMap');
        function hex(bytes){ var f=new Formatter(); for (var i=0;i<bytes.length;i++) f.format("%02x",(bytes[i]&0xff)); var s=f.toString(); f.close(); return s; }
        function S(v){ return (v==null) ? "" : String(v).trim(); }

        if (!S(mc.getProperty('language'))) mc.setProperty('language','en');

        var params=new TreeMap();
        params.put('access_code',         S(mc.getProperty('access_code')));
        params.put('language',            S(mc.getProperty('language')));
        params.put('merchant_identifier', S(mc.getProperty('merchant_identifier')));
        params.put('merchant_reference',  S(mc.getProperty('merchant_reference')));
        params.put('return_url',          S(mc.getProperty('return_url')));
        params.put('service_command',     'TOKENIZATION');

        // بناء التوقيع الصحيح: phrase + key=value(key2=value2...) + phrase
        var phrase = S(mc.getProperty('sha_request_phrase'));
        var sb=new java.lang.StringBuilder();
        sb.append(phrase);
        var it=params.entrySet().iterator();
        while(it.hasNext()){
          var e=it.next();
          sb.append(e.getKey()).append('=').append(S(e.getValue()));
        }
        sb.append(phrase);

        var signature=hex(MessageDigest.getInstance('SHA-256').digest(String(sb.toString()).getBytes('UTF-8')));
        params.put('signature',signature);

        var out={}; var it2=params.entrySet().iterator();
        while(it2.hasNext()){ var e2=it2.next(); out[String(e2.getKey())]=String(e2.getValue()); }

        mc.setPayloadJSON({ gateway_url:String(mc.getProperty('gateway_url')), params:out });
      ]]></script>

      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/>
    </inSequence>
  </resource>

  <!-- =================== 2) الكول باك للتحقق =================== -->
  <resource methods="GET POST" uri-template="/token-callback">
    <inSequence>
      <log level="simple">
        <property name="HIT" value="token-callback"/>
        <property name="METHOD" expression="$axis2:HTTP_METHOD"/>
        <property name="CT" expression="get-property('transport','Content-Type')"/>
      </log>

      <property name="status"              scope="default" type="STRING" expression="$url:status"/>
      <property name="response_code"       scope="default" type="STRING" expression="$url:response_code"/>
      <property name="response_message"    scope="default" type="STRING" expression="$url:response_message"/>
      <property name="merchant_reference"  scope="default" type="STRING" expression="$url:merchant_reference"/>
      <property name="access_code"         scope="default" type="STRING" expression="$url:access_code"/>
      <property name="merchant_identifier" scope="default" type="STRING" expression="$url:merchant_identifier"/>
      <property name="language"            scope="default" type="STRING" expression="$url:language"/>
      <property name="token_name"          scope="default" type="STRING" expression="$url:token_name"/>
      <property name="card_number"         scope="default" type="STRING" expression="$url:card_number"/>
      <property name="expiry_date"         scope="default" type="STRING" expression="$url:expiry_date"/>
      <property name="card_holder_name"    scope="default" type="STRING" expression="$url:card_holder_name"/>
      <property name="remember_me"         scope="default" type="STRING" expression="$url:remember_me"/>
      <property name="signature"           scope="default" type="STRING" expression="$url:signature"/>

      <property name="messageType" scope="axis2" type="STRING" value="application/x-www-form-urlencoded"/>
      <property name="ContentType" scope="axis2" type="STRING" value="application/x-www-form-urlencoded"/>
      <property name="ContentType" scope="transport" type="STRING" value="application/x-www-form-urlencoded"/>
      <property name="service_command" scope="default" type="STRING" expression="$url:service_command"/>
<property name="return_url"      scope="default" type="STRING" expression="$url:return_url"/>
<property name="card_bin"        scope="default" type="STRING" expression="$url:card_bin"/>


      <filter source="$axis2:HTTP_METHOD" regex="POST">
        <then>
          <property name="status"              scope="default" type="STRING" expression="$body//status/text()"/>
          <property name="response_code"       scope="default" type="STRING" expression="$body//response_code/text()"/>
          <property name="response_message"    scope="default" type="STRING" expression="$body//response_message/text()"/>
          <property name="merchant_reference"  scope="default" type="STRING" expression="$body//merchant_reference/text()"/>
          <property name="access_code"         scope="default" type="STRING" expression="$body//access_code/text()"/>
          <property name="merchant_identifier" scope="default" type="STRING" expression="$body//merchant_identifier/text()"/>
          <property name="language"            scope="default" type="STRING" expression="$body//language/text()"/>
          <property name="token_name"          scope="default" type="STRING" expression="$body//token_name/text()"/>
          <property name="card_number"         scope="default" type="STRING" expression="$body//card_number/text()"/>
          <property name="expiry_date"         scope="default" type="STRING" expression="$body//expiry_date/text()"/>
          <property name="card_holder_name"    scope="default" type="STRING" expression="$body//card_holder_name/text()"/>
          <property name="remember_me"         scope="default" type="STRING" expression="$body//remember_me/text()"/>
          <property name="signature"           scope="default" type="STRING" expression="$body//signature/text()"/>
          <property name="service_command" scope="default" type="STRING" expression="$body//service_command/text()"/>
<property name="return_url"      scope="default" type="STRING" expression="$body//return_url/text()"/>
<property name="card_bin"        scope="default" type="STRING" expression="$body//card_bin/text()"/>
        </then>
      </filter>

      <property name="sha_response_phrase" scope="default" type="STRING" value="15/UErLKeX/uqhfugPbvNz)-"/>

      <script language="js"><![CDATA[
        var MessageDigest = Java.type('java.security.MessageDigest');
        var Formatter     = Java.type('java.util.Formatter');
        var TreeMap       = Java.type('java.util.TreeMap');
        var URLDecoder    = Java.type('java.net.URLDecoder');

        function S(v){ return (v==null) ? "" : String(v).trim(); }
        function hex(bytes){ var f=new Formatter(); for (var i=0;i<bytes.length;i++) f.format("%02x",(bytes[i]&0xff)); var s=f.toString(); f.close(); return s; }
        function dec(v){ return S(v).length ? URLDecoder.decode(S(v), "UTF-8") : ""; }

        var keys = [
  "access_code","card_holder_name","card_number","card_bin","expiry_date","language",
  "merchant_identifier","merchant_reference","remember_me",
  "response_code","response_message","service_command","status","token_name","return_url"
];

        var params = new TreeMap();
        for (var i=0;i<keys.length;i++){
          var k = keys[i]; var v = dec(mc.getProperty(k));
          if (v.length>0) params.put(k, v);
        }

        var phrase = S(mc.getProperty("sha_response_phrase"));
        var sb = new java.lang.StringBuilder();
        sb.append(phrase);
        var it = params.entrySet().iterator();
        while (it.hasNext()){
          var e = it.next();
          sb.append(e.getKey()).append("=").append(e.getValue()); // بدون &
        }
        sb.append(phrase);

        var expected = hex(MessageDigest.getInstance("SHA-256").digest(String(sb.toString()).getBytes("UTF-8")));
        var received = S(mc.getProperty("signature"));
        var ok = (expected.toLowerCase() === received.toLowerCase());

        mc.setPayloadJSON({
          signature_ok: ok,
          expected_sig: expected,  
          received_sig: received,   
          base_len:     sb.length(),
          status:           S(mc.getProperty("status")),
          response_code:    S(mc.getProperty("response_code")),
          response_message: S(mc.getProperty("response_message")),
          merchant_reference: S(mc.getProperty("merchant_reference")),
          token_name:       S(mc.getProperty("token_name")),
          masked_card:      S(mc.getProperty("card_number")),
          expiry_date:      S(mc.getProperty("expiry_date")),
          remember_me:      S(mc.getProperty("remember_me"))
        });
      ]]></script>

      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/>
    </inSequence>
  </resource>

  <!-- =================== 3) PURCHASE =================== -->
  <resource methods="POST OPTIONS" protocol="http" uri-template="/payment-api">
    <inSequence>
      <filter source="$axis2:HTTP_METHOD" regex="OPTIONS">
        <then>
          <property name="HTTP_SC" scope="axis2" type="STRING" value="200"/>
          <respond/>
        </then>
      </filter>

      <property name="access_code"          scope="default" type="STRING" value="kJCjkMslRQUSzGDMUb58"/>
      <property name="merchant_identifier"  scope="default" type="STRING" value="HPEpXRQn"/>
      <property name="sha_request_phrase"   scope="default" type="STRING" value="54LdvuI4bpMaq1/3dv8M.x_$"/>
      <property name="sha_response_phrase"  scope="default" type="STRING" value="15/UErLKeX/uqhfugPbvNz)-"/>

      <property name="merchant_reference" scope="default" type="STRING" expression="json-eval($.merchant_reference)"/>
      <property name="amount"             scope="default" type="STRING" expression="json-eval($.amount)"/>
      <property name="currency"           scope="default" type="STRING" expression="json-eval($.currency)"/>
      <property name="language"           scope="default" type="STRING" expression="json-eval($.language)"/>
      <property name="customer_email"     scope="default" type="STRING" expression="json-eval($.customer_email)"/>
      <property name="token_name"         scope="default" type="STRING" expression="json-eval($.token_name)"/>

      <script language="js"><![CDATA[
        var MessageDigest=Java.type('java.security.MessageDigest');
        var Formatter=Java.type('java.util.Formatter');
        var TreeMap=Java.type('java.util.TreeMap');
        function hex(bytes){ var f=new Formatter(); for (var i=0;i<bytes.length;i++) f.format("%02x",(bytes[i]&0xff)); var s=f.toString(); f.close(); return s; }
        function S(v){ return (v==null) ? "" : String(v).trim(); }

        var params=new TreeMap();
        params.put('access_code',         S(mc.getProperty('access_code')));
        params.put('amount',              S(mc.getProperty('amount')));
        params.put('command',             'PURCHASE');
        params.put('currency',            S(mc.getProperty('currency')));
        params.put('customer_email',      S(mc.getProperty('customer_email')));
        params.put('language',            S(mc.getProperty('language')) || 'en');
        params.put('merchant_identifier', S(mc.getProperty('merchant_identifier')));
        params.put('merchant_reference',  S(mc.getProperty('merchant_reference')));
        params.put('token_name',          S(mc.getProperty('token_name')));

        // توقيع الطلب: phrase + key=value... + phrase
        var phrase = S(mc.getProperty('sha_request_phrase'));
        var sb=new java.lang.StringBuilder();
        sb.append(phrase);
        var it=params.entrySet().iterator();
        while (it.hasNext()){
          var e=it.next();
          sb.append(e.getKey()).append('=').append(S(e.getValue())); // بدون &
        }
        sb.append(phrase);

        var signature=hex(MessageDigest.getInstance('SHA-256').digest(String(sb.toString()).getBytes('UTF-8')));
        params.put('signature', signature);

        var o={}; var it2=params.entrySet().iterator();
        while (it2.hasNext()){ var e2=it2.next(); o[String(e2.getKey())]=String(e2.getValue()); }
        mc.setProperty('purchase_json', JSON.stringify(o));
      ]]></script>

      <!-- إرسال إلى APS -->
      <header name="Content-Type" scope="transport" value="application/json"/>
      <property name="HTTP_METHOD" scope="axis2" type="STRING" value="POST"/>
      <payloadFactory media-type="json">
        <format>$1</format>
        <args><arg evaluator="xml" expression="get-property('purchase_json')"/></args>
      </payloadFactory>
      <call>
        <endpoint>
          <http method="POST" uri-template="https://sbcheckout.payfort.com/FortAPI/paymentApi"/>
        </endpoint>
      </call>

      <!-- تحقق توقيع رد APS -->
      <script language="js"><![CDATA[
        var MessageDigest=Java.type('java.security.MessageDigest');
        var Formatter=Java.type('java.util.Formatter');
        var TreeMap=Java.type('java.util.TreeMap');
        function hex(bytes){ var f=new Formatter(); for (var i=0;i<bytes.length;i++) f.format("%02x",(bytes[i]&0xff)); var s=f.toString(); f.close(); return s; }
        function S(v){ return (v==null) ? "" : String(v).trim(); }

        var resp = mc.getPayloadJSON();
        var params=new TreeMap();
        for (var k in resp){
          if (!resp.hasOwnProperty(k)) continue;
          if (String(k).toLowerCase() === 'signature') continue;
          var v = resp[k];
          if (v!==null && String(v).length>0) params.put(String(k), String(v));
        }

        var phrase = String(mc.getProperty('sha_response_phrase'));
        var sb=new java.lang.StringBuilder();
        sb.append(phrase);
        var it=params.entrySet().iterator();
        while (it.hasNext()){
          var e=it.next();
          sb.append(e.getKey()).append("=").append(S(e.getValue())); 
        }
        sb.append(phrase);

        var expected=hex(MessageDigest.getInstance("SHA-256").digest(String(sb.toString()).getBytes("UTF-8")));
        var received=S(resp['signature']);
        resp['signature_ok']=(expected.toLowerCase()===received.toLowerCase());
        // اختياري للديف: resp['expected_sig']=expected;

        mc.setPayloadJSON(resp);
      ]]></script>

      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/>
    </inSequence>
  </resource>

</api>

