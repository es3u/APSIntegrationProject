<?xml version="1.0" encoding="UTF-8"?>
<api context="/aps" name="APSAPI" xmlns="http://ws.apache.org/ns/synapse">

  <!-- ========================= 1) REGISTER USER ========================= -->
  <resource methods="POST" uri-template="/register-user">
    <inSequence>
      <property name="name"  scope="default" type="STRING" expression="json-eval($.name)"/>
      <property name="email" scope="default" type="STRING" expression="json-eval($.email)"/>

      <dbreport>
        <connection>
          <pool>
            <driver>com.mysql.cj.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/APS_DB?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</url>
            <user>Essa</user>
            <password>Essa</password>
          </pool>
        </connection>
        <statement>
          <sql>
            INSERT INTO users (name, email, created_at, updated_at)
            VALUES (?, ?, NOW(), NOW())
            ON DUPLICATE KEY UPDATE name=VALUES(name), updated_at=NOW()
          </sql>
          <parameter expression="get-property('name')"  type="VARCHAR"/>
          <parameter expression="get-property('email')" type="VARCHAR"/>
        </statement>
      </dbreport>

      <payloadFactory media-type="json"><format>{"ok":true}</format></payloadFactory>
      <header  name="Access-Control-Allow-Origin" scope="transport" value="*"/>
      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/>
    </inSequence>
  </resource>

  <!-- ========================= 2) PREPARE TOKEN (TOKENIZATION ONLY) ========================= -->
  <resource methods="POST" uri-template="/prepare-token">
    <inSequence>
      <!-- Merchant -->
      <property name="access_code"         scope="default" type="STRING" value="kJCjkMslRQUSzGDMUb58"/>
      <property name="merchant_identifier" scope="default" type="STRING" value="HPEpXRQn"/>
      <property name="sha_request_phrase"  scope="default" type="STRING" value="54LdvuI4bpMaq1/3dv8M.x_$"/>

      <!-- Inputs -->
      <property name="merchant_reference" scope="default" type="STRING" expression="json-eval($.merchant_reference)"/>
      <property name="language"           scope="default" type="STRING" expression="json-eval($.language)"/>
      <property name="amount"             scope="default" type="STRING" expression="json-eval($.amount)"/>    <!-- minor units -->
      <property name="currency"           scope="default" type="STRING" expression="json-eval($.currency)"/>
      <property name="customer_email"     scope="default" type="STRING" expression="json-eval($.customer_email)"/>

      <property name="return_url"  scope="default" type="STRING" value="http://localhost:8290/aps/token-callback"/>
      <property name="gateway_url" scope="default" type="STRING" value="https://sbcheckout.payfort.com/FortAPI/paymentPage"/>

      <!-- PENDING -->
      <dbreport>
        <connection>
          <pool>
            <driver>com.mysql.cj.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/APS_DB?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</url>
            <user>Essa</user>
            <password>Essa</password>
          </pool>
        </connection>
        <statement>
          <sql>
            INSERT INTO purchases (user_id, merchant_reference, amount_minor, currency, status, created_at, updated_at)
            VALUES (
              (SELECT id FROM users WHERE email=? LIMIT 1),
              ?, ?, ?, 'PENDING', NOW(), NOW()
            )
            ON DUPLICATE KEY UPDATE amount_minor=VALUES(amount_minor), currency=VALUES(currency), updated_at=NOW()
          </sql>
          <parameter expression="get-property('customer_email')"   type="VARCHAR"/>
          <parameter expression="get-property('merchant_reference')" type="VARCHAR"/>
          <parameter expression="get-property('amount')"            type="INTEGER"/>
          <parameter expression="get-property('currency')"          type="VARCHAR"/>
        </statement>
      </dbreport>

      <!--  TOKENIZATION   -->
      <script language="js"><![CDATA[
        var MD=Java.type('java.security.MessageDigest');
        var F=Java.type('java.util.Formatter');
        var TM=Java.type('java.util.TreeMap');
        function S(v){return v==null?"":String(v).trim();}
        function hex(b){var f=new F();for(var i=0;i<b.length;i++)f.format("%02x",(b[i]&0xff));var s=f.toString();f.close();return s;}

        var p=new TM();
        p.put("access_code",         S(mc.getProperty("access_code")));
        p.put("language",            S(mc.getProperty("language"))||"ar");
        p.put("merchant_identifier", S(mc.getProperty("merchant_identifier")));
        p.put("merchant_reference",  S(mc.getProperty("merchant_reference")));
        p.put("return_url",          S(mc.getProperty("return_url")));
        p.put("service_command",     "TOKENIZATION");

        var phrase=S(mc.getProperty("sha_request_phrase"));
        var sb=new java.lang.StringBuilder(); sb.append(phrase);
        var it=p.entrySet().iterator(); while(it.hasNext()){var e=it.next(); sb.append(e.getKey()).append("=").append(S(e.getValue()));}
        sb.append(phrase);
        p.put("signature", hex(MD.getInstance("SHA-256").digest(String(sb.toString()).getBytes("UTF-8"))));

        var out={}; var it2=p.entrySet().iterator(); while(it2.hasNext()){var e2=it2.next(); out[String(e2.getKey())]=String(e2.getValue());}
        mc.setPayloadJSON({gateway_url:String(mc.getProperty("gateway_url")), params:out});
      ]]></script>

      <header  name="Access-Control-Allow-Origin" scope="transport" value="*"/>
      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/>
    </inSequence>
  </resource>

  <!-- ========================= 3) TOKEN CALLBACK (from Merchant Page) ========================= -->
  <resource methods="GET POST" uri-template="/token-callback">
    <inSequence>
            <property name="sha_response_phrase" scope="default" type="STRING" value="15/UErLKeX/uqhfugPbvNz)-"/>

      <!-- Collect URL params -->
            <property name="status" scope="default" type="STRING" expression="$url:status"/>
            <property name="response_code" scope="default" type="STRING" expression="$url:response_code"/>
            <property name="response_message" scope="default" type="STRING" expression="$url:response_message"/>
            <property name="merchant_reference" scope="default" type="STRING" expression="$url:merchant_reference"/>
            <property name="access_code" scope="default" type="STRING" expression="$url:access_code"/>
            <property name="merchant_identifier" scope="default" type="STRING" expression="$url:merchant_identifier"/>
            <property name="language" scope="default" type="STRING" expression="$url:language"/>
            <property name="token_name" scope="default" type="STRING" expression="$url:token_name"/>
            <property name="signature" scope="default" type="STRING" expression="$url:signature"/>
            <property name="fort_id" scope="default" type="STRING" expression="$url:fort_id"/>
            <property name="service_command" scope="default" type="STRING" expression="$url:service_command"/>
            <property name="return_url" scope="default" type="STRING" expression="$url:return_url"/>
            <property name="remember_me" scope="default" type="STRING" expression="$url:remember_me"/>
            <property name="card_bin" scope="default" type="STRING" expression="$url:card_bin"/>
            <property name="card_number" scope="default" type="STRING" expression="$url:card_number"/>
            <property name="card_holder_name" scope="default" type="STRING" expression="$url:card_holder_name"/>
            <property name="expiry_date" scope="default" type="STRING" expression="$url:expiry_date" description="log1"/>

     <log category="INFO" logMessageID="false" logFullPayload="false">
                <message>${properties.synapse.status}</message>
            </log>
            <!-- Override by POST if present -->
      <filter source="$axis2:HTTP_METHOD" regex="POST">
        <then>
                    <property name="status" scope="default" type="STRING" expression="$body//status/text()"/>
                    <property name="response_code" scope="default" type="STRING" expression="$body//response_code/text()"/>
                    <property name="response_message" scope="default" type="STRING" expression="$body//response_message/text()"/>
                    <property name="merchant_reference" scope="default" type="STRING" expression="$body//merchant_reference/text()"/>
                    <property name="access_code" scope="default" type="STRING" expression="$body//access_code/text()"/>
                    <property name="merchant_identifier" scope="default" type="STRING" expression="$body//merchant_identifier/text()"/>
                    <property name="language" scope="default" type="STRING" expression="$body//language/text()"/>
                    <property name="token_name" scope="default" type="STRING" expression="$body//token_name/text()"/>
                    <property name="signature" scope="default" type="STRING" expression="$body//signature/text()"/>
                    <property name="fort_id" scope="default" type="STRING" expression="$body//fort_id/text()"/>
                    <property name="service_command" scope="default" type="STRING" expression="$body//service_command/text()"/>
                    <property name="return_url" scope="default" type="STRING" expression="$body//return_url/text()"/>
                    <property name="remember_me" scope="default" type="STRING" expression="$body//remember_me/text()"/>
                    <property name="card_bin" scope="default" type="STRING" expression="$body//card_bin/text()"/>
                    <property name="card_number" scope="default" type="STRING" expression="$body//card_number/text()"/>
                    <property name="card_holder_name" scope="default" type="STRING" expression="$body//card_holder_name/text()"/>
                    <property name="expiry_date" scope="default" type="STRING" expression="$body//expiry_date/text()"/>
                    <log level="custom" category="INFO">
                        <property name="StatusValue" expression="get-property('status')"/>
                    </log>
                </then>
            </filter>
            <!-- Verify signature -->
      <script language="js"><![CDATA[
        var MD=Java.type('java.security.MessageDigest');
        var F=Java.type('java.util.Formatter');
        var TM=Java.type('java.util.TreeMap');
        function S(v){return v==null?"":String(v).trim();}
        function hex(b){var f=new F();for(var i=0;i<b.length;i++)f.format("%02x",(b[i]&0xff));var s=f.toString();f.close();return s;}

        var keys = [
          "access_code","language","merchant_identifier","merchant_reference",
          "response_code","response_message","service_command","status","token_name","fort_id",
          "return_url","remember_me","card_bin","card_number","card_holder_name","expiry_date"
        ];
        var p=new TM();
        for(var i=0;i<keys.length;i++){ var k=keys[i], v=S(mc.getProperty(k)); if(v.length>0) p.put(k,v); }

        var phrase=S(mc.getProperty("sha_response_phrase"));
        var sb=new java.lang.StringBuilder(); sb.append(phrase);
        var it=p.entrySet().iterator(); while(it.hasNext()){var e=it.next(); sb.append(e.getKey()).append("=").append(e.getValue());}
        sb.append(phrase);
        var expected=hex(MD.getInstance("SHA-256").digest(String(sb.toString()).getBytes("UTF-8")));
        var ok=(expected.toLowerCase()===S(mc.getProperty("signature")).toLowerCase());

        mc.setPayloadJSON({
          signature_ok: ok,
          expected_sig: expected,
          received_sig: S(mc.getProperty("signature")),
          status: S(mc.getProperty("status")),
          response_code: S(mc.getProperty("response_code")),
          response_message: S(mc.getProperty("response_message")),
          merchant_reference: S(mc.getProperty("merchant_reference")),
          token_name: S(mc.getProperty("token_name")),
          fort_id: S(mc.getProperty("fort_id"))
        });
      ]]></script>

      <log category="INFO" logMessageID="false" logFullPayload="true">
                <message>new json</message>
            </log>
            <!-- إذا التوقيع OK وtoken موجود: حدّث users.token_name ثم نادِ /payment-api -->
      <filter source="json-eval($.signature_ok)" regex="true">
        <then>
          <filter source="json-eval($.token_name)" regex=".+">
            <then>
              <dbreport>
                <connection>
                  <pool>
                    <driver>com.mysql.cj.jdbc.Driver</driver>
                    <url>jdbc:mysql://localhost:3306/APS_DB?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</url>
                    <user>Essa</user>
                    <password>Essa</password>
                                    </pool>
                                </connection>
                <statement>
                  <sql>
                                        UPDATE users
                                        SET token_name = ?, updated_at = NOW()
                                        WHERE id = (SELECT user_id FROM purchases WHERE merchant_reference = ? LIMIT 1)
                                    </sql>
                  <parameter expression="json-eval($.token_name)"         type="VARCHAR"/>
                  <parameter expression="json-eval($.merchant_reference)" type="VARCHAR"/>
                                </statement>
                            </dbreport>
                            <!-- اسحب amount/currency/email من DB لهذا المرجع -->
              <dblookup>
                <connection>
                  <pool>
                    <driver>com.mysql.cj.jdbc.Driver</driver>
                    <url>jdbc:mysql://localhost:3306/APS_DB?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</url>
                    <user>Essa</user>
                    <password>Essa</password>
                                    </pool>
                                </connection>
                <statement>
                  <sql>
                                        SELECT p.amount_minor AS a_amount, p.currency AS a_currency, u.email AS a_email
                                        FROM purchases p JOIN users u ON u.id=p.user_id
                                        WHERE p.merchant_reference = ?
                                    </sql>
                  <parameter expression="json-eval($.merchant_reference)" type="VARCHAR"/>
                  <result name="a_amount"   column="a_amount"/>
                  <result name="a_currency" column="a_currency"/>
                  <result name="a_email"    column="a_email"/>
                                </statement>
                            </dblookup>

                            <!-- payment-api -->
              <payloadFactory media-type="json">
                  <format>{
                    "merchant_reference":"$1",
                    "amount":"$2",
                    "currency":"$3",
                    "language":"$4",
                    "token_name":"$5",
                    "customer_email":"$6"
                  }</format>
                  <args>
                    <arg expression="get-property('merchant_reference')"/>
                    <arg expression="get-property('a_amount')"/>
                    <arg expression="get-property('a_currency')"/>
                    <arg expression="get-property('language')"/>
                    <arg evaluator="json" expression="$.token_name"/>
                    <arg expression="get-property('a_email')"/>
                  </args>
                </payloadFactory>
              <header name="Content-Type" scope="transport" value="application/json"/>

              <call>
                <endpoint><http method="POST" uri-template="http://localhost:8290/aps/payment-api"/>
                                </endpoint>
                            </call>
              <filter source="json-eval($.status)" regex="14">
                <then><property name="result_msg" scope="default" type="STRING" value="تمت عملية الشراء بنجاح ✅"/>
                                </then>
                <else><property name="result_msg" scope="default" type="STRING" value="فشلت عملية الشراء ❌"/>
                                </else>
                            </filter>
                        </then>
                    </filter>
                </then>
            </filter>
      <payloadFactory media-type="text">
        <format>$1</format>
        <args>
          <arg expression="get-property('result_msg')"/>
                </args>
            </payloadFactory>
      <property name="messageType" scope="axis2" type="STRING" value="text/html"/>
      <respond/>
        </inSequence>
  </resource>
<!-- ========================= 4) DIRECT PURCHASE WITH TOKEN ========================= -->
<resource methods="POST" uri-template="/payment-api">
  <inSequence>

    <log category="INFO" logMessageID="false" logFullPayload="true">
      <message>from payment-api</message>
    </log>

    <property name="access_code"         scope="default" type="STRING" value="kJCjkMslRQUSzGDMUb58"/>
    <property name="merchant_identifier" scope="default" type="STRING" value="HPEpXRQn"/>
    <property name="sha_request_phrase"  scope="default" type="STRING" value="54LdvuI4bpMaq1/3dv8M.x_$"/>
    <property name="sha_response_phrase" scope="default" type="STRING" value="15/UErLKeX/uqhfugPbvNz)-"/>

    <property name="merchant_reference" scope="default" type="STRING" expression="json-eval($.merchant_reference)"/>
    <property name="amount"             scope="default" type="STRING" expression="json-eval($.amount)"/>
    <property name="currency"           scope="default" type="STRING" expression="json-eval($.currency)"/>
    <property name="token_name"         scope="default" type="STRING" expression="json-eval($.token_name)"/>
    <property name="customer_email"     scope="default" type="STRING" expression="json-eval($.customer_email)"/>
    <property name="language"           scope="default" type="STRING" expression="json-eval($.language)"/>

    <!-- Validation -->
    <filter source="get-property('merchant_reference')" regex="^$"><then>
      <payloadFactory media-type="json"><format>{"error":"merchant_reference is required"}</format></payloadFactory>
      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/><drop/>
    </then></filter>
    <filter source="get-property('amount')" regex="^$|[^0-9]"><then>
      <payloadFactory media-type="json"><format>{"error":"amount must be minor units"}</format></payloadFactory>
      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/><drop/>
    </then></filter>
    <filter source="get-property('currency')" regex="^$"><then>
      <payloadFactory media-type="json"><format>{"error":"currency is required"}</format></payloadFactory>
      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/><drop/>
    </then></filter>
    <filter source="get-property('token_name')" regex="^$"><then>
      <payloadFactory media-type="json"><format>{"error":"token_name is required"}</format></payloadFactory>
      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/><drop/>
    </then></filter>

    <!-- Language fallback -->
    <filter source="get-property('language')" regex="^$"><then>
      <property name="language" scope="default" type="STRING" value="en"/>
    </then></filter>

    <!-- Build APS purchase request -->
    <script language="js"><![CDATA[
      var MessageDigest = Java.type('java.security.MessageDigest');
      var Formatter     = Java.type('java.util.Formatter');
      var TreeMap       = Java.type('java.util.TreeMap');

      function S(v){ return (v==null) ? "" : String(v).trim(); }
      function hex(bytes){
        var f = new Formatter();
        for (var i=0;i<bytes.length;i++) f.format("%02x", (bytes[i] & 0xff));
        var s = f.toString(); f.close(); return s;
      }

      var phrase = S(mc.getProperty("sha_request_phrase"));
      var params = new TreeMap();

      function put(k){ var v=S(mc.getProperty(k)); if(v.length>0) params.put(k,v); }

      put("access_code");
      put("amount");
      put("currency");
      put("customer_email");
      put("language");
      put("merchant_identifier");
      put("merchant_reference");
      put("token_name");
      params.put("command","PURCHASE");

      // build signature string
      var sb = new java.lang.StringBuilder();
      sb.append(phrase);
      var it=params.entrySet().iterator();
      while(it.hasNext()){
        var e=it.next();
        sb.append(e.getKey()).append("=").append(e.getValue());
      }
      sb.append(phrase);

      var md = MessageDigest.getInstance("SHA-256");
      var signature = hex(md.digest(sb.toString().getBytes("UTF-8")));
      params.put("signature",signature);

      // prepare JSON body
      var o={};
      var it2=params.entrySet().iterator();
      while(it2.hasNext()){var e2=it2.next();o[String(e2.getKey())]=String(e2.getValue());}
      mc.setPayloadJSON(o);
    ]]></script>
    <log category="INFO" logMessageID="false" logFullPayload="true">
      <message>from payment-api02</message>
    </log>
<header name="Content-Type" scope="transport" value="application/json"/>
<property name="messageType" scope="axis2" type="STRING" value="application/json"/>
<property name="ContentType" scope="axis2" type="STRING" value="application/json"/>
    <log category="INFO" logMessageID="false" logFullPayload="true">
      <message>from payment-api02</message>
    </log>
 
    <call>
      <endpoint><http method="POST" uri-template="https://sbpaymentservices.payfort.com/FortAPI/paymentApi"/></endpoint>
    </call>

    <!-- handle APS response 
    <property name="HTTP_SC" scope="axis2" expression="$axis2:HTTP_SC"/>
    <property name="CT"      scope="transport" expression="$trp:Content-Type"/> -->
<!-- <filter source="$trp:Content-Type" regex="(?i)^application/json">
      <then/>
      <else>
        <payloadFactory media-type="json">
          <format>{
            "status":"FAILED",
            "response_code":"HTTP_$1",
            "response_message":"Non-JSON response from APS",
            "fort_id": null
          }</format>
          <args><arg expression="$axis2:HTTP_SC"/></args>
        </payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      </else>
    </filter>
 -->
   
    <property name="status_text" scope="default" type="STRING" value="FAILED"/>
    <filter source="json-eval($.status)" regex="14">
      <then><property name="status_text" scope="default" type="STRING" value="SUCCESS"/></then>
    </filter>

    <!-- update DB -->
    <dbreport>
      <connection>
        <pool>
          <driver>com.mysql.cj.jdbc.Driver</driver>
          <url>jdbc:mysql://localhost:3306/aps_db?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</url>
          <user>Essa</user>
          <password>Essa</password>
        </pool>
      </connection>
      <statement>
        <sql>
          INSERT INTO purchases (user_id, merchant_reference, fort_id, amount_minor, currency, status, response_code, response_message, created_at, updated_at)
          VALUES (
            (SELECT id FROM users WHERE token_name = ? LIMIT 1),
            ?, ?, ?, ?, ?, ?, ?, NOW(), NOW()
          )
          ON DUPLICATE KEY UPDATE
            fort_id         = VALUES(fort_id),
            status          = VALUES(status),
            response_code   = VALUES(response_code),
            response_message= VALUES(response_message),
            updated_at      = NOW()
        </sql>
<parameter expression="get-property('token_name')"         type="VARCHAR"/>
<parameter expression="get-property('merchant_reference')" type="VARCHAR"/>
<parameter expression="json-eval($.fort_id)"               type="VARCHAR"/>
<parameter expression="get-property('amount')"             type="INTEGER"/>
<parameter expression="get-property('currency')"           type="VARCHAR"/>
<parameter expression="get-property('status_text')"        type="VARCHAR"/>
<parameter expression="json-eval($.response_code)"         type="VARCHAR"/>
<parameter expression="json-eval($.response_message)"      type="VARCHAR"/>

      </statement>
    </dbreport>

    <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
    <respond/>
  </inSequence>
</resource>


  <!-- ========================= 5) PAYMENT EXISTING (تكرار الشراء) ========================= -->
  <resource methods="POST" uri-template="/payment-existing">
    <inSequence>
      <property name="access_code"         scope="default" type="STRING" value="kJCjkMslRQUSzGDMUb58"/>
      <property name="merchant_identifier" scope="default" type="STRING" value="HPEpXRQn"/>
      <property name="sha_request_phrase"  scope="default" type="STRING" value="54LdvuI4bpMaq1/3dv8M.x_$"/>
      <property name="sha_response_phrase" scope="default" type="STRING" value="15/UErLKeX/uqhfugPbvNz)-"/>

      <property name="merchant_reference" scope="default" type="STRING" expression="json-eval($.merchant_reference)"/>
      <property name="amount"             scope="default" type="STRING" expression="json-eval($.amount)"/>
      <property name="currency"           scope="default" type="STRING" expression="json-eval($.currency)"/>
      <property name="language"           scope="default" type="STRING" expression="json-eval($.language)"/>
      <property name="customer_email"     scope="default" type="STRING" expression="json-eval($.customer_email)"/>

      <!-- Validation  -->
      <filter source="get-property('merchant_reference')" regex="^$"><then>
        <payloadFactory media-type="json"><format>{"error":"merchant_reference is required"}</format></payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
        <respond/><drop/>
      </then></filter>
      <filter source="get-property('amount')" regex="^$|[^0-9]"><then>
        <payloadFactory media-type="json"><format>{"error":"amount must be minor units"}</format></payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
        <respond/><drop/>
      </then></filter>
      <filter source="get-property('currency')" regex="^$"><then>
        <payloadFactory media-type="json"><format>{"error":"currency is required"}</format></payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
        <respond/><drop/>
      </then></filter>
      <filter source="get-property('customer_email')" regex="^$"><then>
        <payloadFactory media-type="json"><format>{"error":"customer_email is required"}</format></payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
        <respond/><drop/>
      </then></filter>
      <filter source="get-property('language')" regex="^$"><then>
        <property name="language" scope="default" type="STRING" value="en"/>
      </then></filter>

      <!--   token_name + تحقق من وجود عملية ناجحة سابقة -->
      <dblookup>
    <connection>
        <pool>
            <driver>com.mysql.cj.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/APS_DB?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</url>
            <user>Essa</user>
            <password>Essa</password>
        </pool>
    </connection>
    <statement>
        <sql>
            SELECT u.id,
                   u.name,
                   u.email,
                   u.token_name,
                   CASE WHEN EXISTS (
                        SELECT 1 
                          FROM purchases p 
                         WHERE p.user_id = u.id 
                           AND p.status = 'SUCCESS'
                   ) THEN 1 ELSE 0 END AS has_success
              FROM users u
             WHERE u.email = ?
             LIMIT 1
        </sql>
        <parameter expression="get-property('customer_email')" type="VARCHAR"/>
        
        <!-- القيم ترجع كـ properties -->
        <result name="user_id"      column="id"/>
        <result name="user_name"    column="name"/>
        <result name="user_email"   column="email"/>
        <result name="token_name"   column="token_name"/>
        <result name="has_success"  column="has_success"/>
    </statement>
</dblookup>

<log level="custom">
  <property name="DBG_user_id"      expression="get-property('user_id')"/>
  <property name="DBG_user_email"   expression="get-property('user_email')"/>
  <property name="DBG_token_name"   expression="get-property('token_name')"/>
  <property name="DBG_has_success"  expression="get-property('has_success')"/>
</log>


  <property name="token_name" scope="default" type="STRING" expression="get-property('token_name')"/>
<!-- <filter source="get-property('a_token')" regex="^$"><then>
        <payloadFactory media-type="json"><format>{"error":"no saved token for this customer"}</format></payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
        <respond/><drop/>
      </then></filter>
      <filter source="get-property('a_success')" regex="^$|^0$"><then>
        <payloadFactory media-type="json"><format>{"error":"no previous successful purchase"}</format></payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
        <respond/><drop/>
      </then></filter> -->
     <script language="js"><![CDATA[
  var MessageDigest = Java.type('java.security.MessageDigest');
  var Formatter     = Java.type('java.util.Formatter');
  var TreeMap       = Java.type('java.util.TreeMap');

  function S(v){ return (v==null) ? "" : String(v).trim(); }
  function hex(bytes){
    var f=new Formatter();
    for (var i=0;i<bytes.length;i++) f.format("%02x",(bytes[i]&0xff));
    var s=f.toString(); f.close(); return s;
  }

  var phrase = S(mc.getProperty("sha_request_phrase"));

  var input = mc.getPayloadJSON();

  input["access_code"]         = S(mc.getProperty("access_code"));
  input["merchant_identifier"] = S(mc.getProperty("merchant_identifier"));
  input["token_name"]          = S(mc.getProperty("token_name"));   
  input["command"]             = "PURCHASE";                        

  var params = new TreeMap();
  function put(k){ var v=S(input[k]); if(v.length>0) params.put(k, v); }

  put("access_code");
  put("amount");
  put("card_security_code");    
  put("command");
  put("currency");
  put("customer_email");
  put("language");
  put("merchant_identifier");
  put("merchant_reference");
  put("token_name");

  var cvv = S(input["card_security_code"]);
  if (cvv.length > 0) {
    params.put("card_security_code", cvv);
  } else {
    params.remove("card_security_code");
  }

  var sb = new java.lang.StringBuilder();
  sb.append(phrase);
  var it = params.entrySet().iterator();
  while (it.hasNext()) {
    var e = it.next();
    sb.append(e.getKey()).append("=").append(e.getValue());
  }
  sb.append(phrase);

  var md = MessageDigest.getInstance("SHA-256");
  var signature = hex(md.digest(sb.toString().getBytes("UTF-8")));
  params.put("signature", signature);

  var out = {};
  var it2 = params.entrySet().iterator();
  while (it2.hasNext()) {
    var e2 = it2.next();
    out[String(e2.getKey())] = String(e2.getValue());
  }

  mc.setProperty("SIGN_STRING", sb.toString());
  mc.setProperty("SIGNATURE", signature);

  mc.setPayloadJSON(out);
]]></script>


<log level="custom">
  <property name="SIGN_STRING" expression="get-property('SIGN_STRING')"/>
  <property name="SIGNATURE" expression="get-property('SIGNATURE')"/>
</log>


      <header name="Content-Type" scope="transport" value="application/json"/>
<property name="messageType" scope="axis2" type="STRING" value="application/json"/>
<property name="ContentType" scope="axis2" type="STRING" value="application/json"/>
    <log category="INFO" logMessageID="false" logFullPayload="true">
      <message>from payment-api02</message>
    </log>
 
    <call>
      <endpoint><http method="POST" uri-template="https://sbpaymentservices.payfort.com/FortAPI/paymentApi"/></endpoint>
    </call>

    <log level="full" category="INFO"/>

<!-- <property name="status_text" scope="default" type="STRING" value="FAILED"/>
<filter source="json-eval($.status)" regex="14">
  <then>-->

    <property name="status_text" scope="default" type="STRING" value="SUCCESS"/>



      <dbreport>
        <connection>
          <pool>
            <driver>com.mysql.cj.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/APS_DB?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</url>
            <user>Essa</user>
            <password>Essa</password>
          </pool>
        </connection>
        <statement>
          <sql>
            INSERT INTO purchases (user_id, merchant_reference, fort_id, amount_minor, currency, status, response_code, response_message, created_at, updated_at)
            VALUES (
              (SELECT id FROM users WHERE token_name = ? LIMIT 1),
              ?, ?, ?, ?, ?, ?, ?, NOW(), NOW()
            )
            ON DUPLICATE KEY UPDATE
              fort_id         = VALUES(fort_id),
              amount_minor    = VALUES(amount_minor),
              currency        = VALUES(currency),
              status          = VALUES(status),
              response_code   = VALUES(response_code),
              response_message= VALUES(response_message),
              updated_at      = NOW()
          </sql>
          <parameter expression="get-property('token_name')"         type="VARCHAR"/>
          <parameter expression="get-property('merchant_reference')" type="VARCHAR"/>
          <parameter expression="json-eval($.fort_id)"               type="VARCHAR"/>
          <parameter expression="get-property('amount')"             type="INTEGER"/>
          <parameter expression="get-property('currency')"           type="VARCHAR"/>
<parameter expression="get-property('status_text')" type="VARCHAR"/>
          <parameter expression="json-eval($.response_code)"         type="VARCHAR"/>
          <parameter expression="json-eval($.response_message)"      type="VARCHAR"/>
        </statement>
      </dbreport>

      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/>
    </inSequence>
  </resource>
  <!-- ========================= REFUND (stores only into `refunds`) ========================= -->
  <resource methods="POST" uri-template="/refund">
    <inSequence>
      <property name="access_code"         scope="default" type="STRING" value="kJCjkMslRQUSzGDMUb58"/>
      <property name="merchant_identifier" scope="default" type="STRING" value="HPEpXRQn"/>
      <property name="sha_request_phrase"  scope="default" type="STRING" value="54LdvuI4bpMaq1/3dv8M.x_$"/>

      <property name="merchant_reference" scope="default" type="STRING" expression="json-eval($.merchant_reference)"/>
      <property name="amount"             scope="default" type="STRING" expression="json-eval($.amount)"/>
      <property name="currency"           scope="default" type="STRING" expression="json-eval($.currency)"/>
      <property name="language"           scope="default" type="STRING" expression="json-eval($.language)"/>

      <!-- Validate -->
      <filter source="get-property('merchant_reference')" regex="^$"><then>
        <payloadFactory media-type="json"><format>{"error":"merchant_reference is required"}</format></payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
        <respond/><drop/>
      </then></filter>
      <filter source="get-property('amount')" regex="^$|[^0-9]"><then>
        <payloadFactory media-type="json"><format>{"error":"amount must be minor units"}</format></payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
        <respond/><drop/>
      </then></filter>
      <filter source="get-property('currency')" regex="^$"><then>
        <payloadFactory media-type="json"><format>{"error":"currency is required"}</format></payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
        <respond/><drop/>
      </then></filter>
      <filter source="get-property('language')" regex="^$"><then>
        <property name="language" scope="default" type="STRING" value="en"/>
      </then></filter>

      <dblookup>
        <connection>
          <pool>
            <driver>com.mysql.cj.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/aps_db?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</url>
            <user>Essa</user>
            <password>Essa</password>
          </pool>
        </connection>
        <statement>
          <sql>
            SELECT p.id AS a_purchase_id, u.id AS a_user_id, p.fort_id AS a_fort
              FROM purchases p
              JOIN users u ON u.id = p.user_id
             WHERE p.merchant_reference = ?
               AND p.status = '14'
             LIMIT 1
          </sql>
          <parameter expression="get-property('merchant_reference')" type="VARCHAR"/>
          <result name="a_purchase_id" column="a_purchase_id"/>
          <result name="a_user_id"     column="a_user_id"/>
          <result name="a_fort"        column="a_fort"/>
        </statement>
      </dblookup>

      <filter source="get-property('a_purchase_id')" regex="^$"><then>
        <payloadFactory media-type="json"><format>{"error":"no successful purchase found for this merchant_reference"}</format></payloadFactory>
        <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
        <respond/><drop/>
      </then></filter>

      <!-- Build REFUND request -->
      <script language="js"><![CDATA[
        var MD=Java.type('java.security.MessageDigest');
        var F=Java.type('java.util.Formatter');
        var TM=Java.type('java.util.TreeMap');
        function S(v){return v==null?"":String(v).trim();}
        function hex(b){var f=new F();for(var i=0;i<b.length;i++)f.format('%02x',(b[i]&0xff));var s=f.toString();f.close();return s;}

        var p=new TM();
        p.put('access_code',         S(mc.getProperty('access_code')));
        p.put('command',             'REFUND');
        p.put('merchant_identifier', S(mc.getProperty('merchant_identifier')));
        p.put('merchant_reference',  S(mc.getProperty('merchant_reference')));
        p.put('amount',              S(mc.getProperty('amount')));
        p.put('currency',            S(mc.getProperty('currency')));
        p.put('language',            S(mc.getProperty('language'))||'en');
        // fort_id helps link to original transaction (kept, even if not mandatory in your list)
        var fort=S(mc.getProperty('a_fort')); if(fort.length>0) p.put('fort_id', fort);

        var phrase=S(mc.getProperty('sha_request_phrase'));
        var sb=new java.lang.StringBuilder(); sb.append(phrase);
        var it=p.entrySet().iterator(); while(it.hasNext()){var e=it.next(); sb.append(e.getKey()).append('=').append(S(e.getValue()));}
        sb.append(phrase);
        p.put('signature', hex(MD.getInstance('SHA-256').digest(String(sb.toString()).getBytes('UTF-8'))));

        var body={}; var it2=p.entrySet().iterator(); while(it2.hasNext()){var e2=it2.next(); body[String(e2.getKey())]=String(e2.getValue());}
        mc.setPayloadJSON(body);
      ]]></script>
      <log category="INFO" logMessageID="false" logFullPayload="true">
        <message>from refund</message>
      </log>

      <header name="Content-Type" scope="transport" value="application/json"/>
      <call>
        <endpoint>
          <http method="POST" uri-template="https://sbpaymentservices.payfort.com/FortAPI/paymentApi"/>
        </endpoint>
      </call>

      <dbreport>
        <connection>
          <pool>
            <driver>com.mysql.cj.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/aps_db?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC</url>
            <user>Essa</user>
            <password>Essa</password>
          </pool>
        </connection>
        <statement>
          <sql>
            INSERT INTO refunds (purchase_id, user_id, amount, currency, status, response_code, response_message)
            VALUES (?, ?, ?, ?, ?, ?, ?)
          </sql>
          <parameter expression="get-property('a_purchase_id')" type="INTEGER"/>
          <parameter expression="get-property('a_user_id')"     type="INTEGER"/>
          <parameter expression="get-property('amount')"        type="INTEGER"/>
          <parameter expression="get-property('currency')"      type="VARCHAR"/>
          <parameter expression="json-eval($.status)"           type="VARCHAR"/>
          <parameter expression="json-eval($.response_code)"    type="VARCHAR"/>
          <parameter expression="json-eval($.response_message)" type="VARCHAR"/>
        </statement>
      </dbreport>

      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/>
    </inSequence>
  </resource>

</api>
